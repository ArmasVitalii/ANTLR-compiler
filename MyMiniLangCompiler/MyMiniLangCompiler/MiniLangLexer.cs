//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from f:/UniTBv/LFC/RepoCommpilator/MyMiniLangCompiler/MyMiniLangCompiler/MiniLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class MiniLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		KEYWORD_INT=1, KEYWORD_FLOAT=2, KEYWORD_DOUBLE=3, KEYWORD_STRING=4, KEYWORD_VOID=5, 
		KEYWORD_IF=6, KEYWORD_ELSE=7, KEYWORD_FOR=8, KEYWORD_WHILE=9, KEYWORD_RETURN=10, 
		PLUS=11, MINUS=12, STAR=13, DIV=14, MOD=15, LT=16, GT=17, LE=18, GE=19, 
		EQUAL=20, NOTEQUAL=21, AND=22, OR=23, NOT=24, ASSIGN=25, PLUS_ASSIGN=26, 
		MINUS_ASSIGN=27, MUL_ASSIGN=28, DIV_ASSIGN=29, MOD_ASSIGN=30, INC=31, 
		DEC=32, LPAREN=33, RPAREN=34, LBRACE=35, RBRACE=36, SEMI=37, COMMA=38, 
		ID=39, NUM=40, STRING_LITERAL=41, WS=42, LINE_COMMENT=43, BLOCK_COMMENT=44;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"KEYWORD_INT", "KEYWORD_FLOAT", "KEYWORD_DOUBLE", "KEYWORD_STRING", "KEYWORD_VOID", 
		"KEYWORD_IF", "KEYWORD_ELSE", "KEYWORD_FOR", "KEYWORD_WHILE", "KEYWORD_RETURN", 
		"PLUS", "MINUS", "STAR", "DIV", "MOD", "LT", "GT", "LE", "GE", "EQUAL", 
		"NOTEQUAL", "AND", "OR", "NOT", "ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
		"MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "INC", "DEC", "LPAREN", "RPAREN", 
		"LBRACE", "RBRACE", "SEMI", "COMMA", "ID", "NUM", "STRING_LITERAL", "WS", 
		"LINE_COMMENT", "BLOCK_COMMENT"
	};


	public MiniLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'float'", "'double'", "'string'", "'void'", "'if'", "'else'", 
		"'for'", "'while'", "'return'", "'+'", "'-'", "'*'", "'/'", "'%'", "'<'", 
		"'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'!'", "'='", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'++'", "'--'", "'('", "')'", "'{'", "'}'", 
		"';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "KEYWORD_INT", "KEYWORD_FLOAT", "KEYWORD_DOUBLE", "KEYWORD_STRING", 
		"KEYWORD_VOID", "KEYWORD_IF", "KEYWORD_ELSE", "KEYWORD_FOR", "KEYWORD_WHILE", 
		"KEYWORD_RETURN", "PLUS", "MINUS", "STAR", "DIV", "MOD", "LT", "GT", "LE", 
		"GE", "EQUAL", "NOTEQUAL", "AND", "OR", "NOT", "ASSIGN", "PLUS_ASSIGN", 
		"MINUS_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "INC", "DEC", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "SEMI", "COMMA", "ID", "NUM", 
		"STRING_LITERAL", "WS", "LINE_COMMENT", "BLOCK_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,44,275,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
		5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
		1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
		1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,
		1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,
		1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
		1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
		1,36,1,37,1,37,1,38,1,38,5,38,215,8,38,10,38,12,38,218,9,38,1,39,4,39,
		221,8,39,11,39,12,39,222,1,39,1,39,4,39,227,8,39,11,39,12,39,228,3,39,
		231,8,39,1,40,1,40,1,40,1,40,5,40,237,8,40,10,40,12,40,240,9,40,1,40,1,
		40,1,41,4,41,245,8,41,11,41,12,41,246,1,41,1,41,1,42,1,42,1,42,1,42,5,
		42,255,8,42,10,42,12,42,258,9,42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,266,
		8,43,10,43,12,43,269,9,43,1,43,1,43,1,43,1,43,1,43,1,267,0,44,1,1,3,2,
		5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
		16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
		28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
		40,81,41,83,42,85,43,87,44,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
		95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,
		10,10,13,13,283,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
		0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
		0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
		0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
		1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,
		0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
		1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
		0,0,87,1,0,0,0,1,89,1,0,0,0,3,93,1,0,0,0,5,99,1,0,0,0,7,106,1,0,0,0,9,
		113,1,0,0,0,11,118,1,0,0,0,13,121,1,0,0,0,15,126,1,0,0,0,17,130,1,0,0,
		0,19,136,1,0,0,0,21,143,1,0,0,0,23,145,1,0,0,0,25,147,1,0,0,0,27,149,1,
		0,0,0,29,151,1,0,0,0,31,153,1,0,0,0,33,155,1,0,0,0,35,157,1,0,0,0,37,160,
		1,0,0,0,39,163,1,0,0,0,41,166,1,0,0,0,43,169,1,0,0,0,45,172,1,0,0,0,47,
		175,1,0,0,0,49,177,1,0,0,0,51,179,1,0,0,0,53,182,1,0,0,0,55,185,1,0,0,
		0,57,188,1,0,0,0,59,191,1,0,0,0,61,194,1,0,0,0,63,197,1,0,0,0,65,200,1,
		0,0,0,67,202,1,0,0,0,69,204,1,0,0,0,71,206,1,0,0,0,73,208,1,0,0,0,75,210,
		1,0,0,0,77,212,1,0,0,0,79,220,1,0,0,0,81,232,1,0,0,0,83,244,1,0,0,0,85,
		250,1,0,0,0,87,261,1,0,0,0,89,90,5,105,0,0,90,91,5,110,0,0,91,92,5,116,
		0,0,92,2,1,0,0,0,93,94,5,102,0,0,94,95,5,108,0,0,95,96,5,111,0,0,96,97,
		5,97,0,0,97,98,5,116,0,0,98,4,1,0,0,0,99,100,5,100,0,0,100,101,5,111,0,
		0,101,102,5,117,0,0,102,103,5,98,0,0,103,104,5,108,0,0,104,105,5,101,0,
		0,105,6,1,0,0,0,106,107,5,115,0,0,107,108,5,116,0,0,108,109,5,114,0,0,
		109,110,5,105,0,0,110,111,5,110,0,0,111,112,5,103,0,0,112,8,1,0,0,0,113,
		114,5,118,0,0,114,115,5,111,0,0,115,116,5,105,0,0,116,117,5,100,0,0,117,
		10,1,0,0,0,118,119,5,105,0,0,119,120,5,102,0,0,120,12,1,0,0,0,121,122,
		5,101,0,0,122,123,5,108,0,0,123,124,5,115,0,0,124,125,5,101,0,0,125,14,
		1,0,0,0,126,127,5,102,0,0,127,128,5,111,0,0,128,129,5,114,0,0,129,16,1,
		0,0,0,130,131,5,119,0,0,131,132,5,104,0,0,132,133,5,105,0,0,133,134,5,
		108,0,0,134,135,5,101,0,0,135,18,1,0,0,0,136,137,5,114,0,0,137,138,5,101,
		0,0,138,139,5,116,0,0,139,140,5,117,0,0,140,141,5,114,0,0,141,142,5,110,
		0,0,142,20,1,0,0,0,143,144,5,43,0,0,144,22,1,0,0,0,145,146,5,45,0,0,146,
		24,1,0,0,0,147,148,5,42,0,0,148,26,1,0,0,0,149,150,5,47,0,0,150,28,1,0,
		0,0,151,152,5,37,0,0,152,30,1,0,0,0,153,154,5,60,0,0,154,32,1,0,0,0,155,
		156,5,62,0,0,156,34,1,0,0,0,157,158,5,60,0,0,158,159,5,61,0,0,159,36,1,
		0,0,0,160,161,5,62,0,0,161,162,5,61,0,0,162,38,1,0,0,0,163,164,5,61,0,
		0,164,165,5,61,0,0,165,40,1,0,0,0,166,167,5,33,0,0,167,168,5,61,0,0,168,
		42,1,0,0,0,169,170,5,38,0,0,170,171,5,38,0,0,171,44,1,0,0,0,172,173,5,
		124,0,0,173,174,5,124,0,0,174,46,1,0,0,0,175,176,5,33,0,0,176,48,1,0,0,
		0,177,178,5,61,0,0,178,50,1,0,0,0,179,180,5,43,0,0,180,181,5,61,0,0,181,
		52,1,0,0,0,182,183,5,45,0,0,183,184,5,61,0,0,184,54,1,0,0,0,185,186,5,
		42,0,0,186,187,5,61,0,0,187,56,1,0,0,0,188,189,5,47,0,0,189,190,5,61,0,
		0,190,58,1,0,0,0,191,192,5,37,0,0,192,193,5,61,0,0,193,60,1,0,0,0,194,
		195,5,43,0,0,195,196,5,43,0,0,196,62,1,0,0,0,197,198,5,45,0,0,198,199,
		5,45,0,0,199,64,1,0,0,0,200,201,5,40,0,0,201,66,1,0,0,0,202,203,5,41,0,
		0,203,68,1,0,0,0,204,205,5,123,0,0,205,70,1,0,0,0,206,207,5,125,0,0,207,
		72,1,0,0,0,208,209,5,59,0,0,209,74,1,0,0,0,210,211,5,44,0,0,211,76,1,0,
		0,0,212,216,7,0,0,0,213,215,7,1,0,0,214,213,1,0,0,0,215,218,1,0,0,0,216,
		214,1,0,0,0,216,217,1,0,0,0,217,78,1,0,0,0,218,216,1,0,0,0,219,221,7,2,
		0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,1,0,0,0,223,
		230,1,0,0,0,224,226,5,46,0,0,225,227,7,2,0,0,226,225,1,0,0,0,227,228,1,
		0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,231,1,0,0,0,230,224,1,0,0,0,
		230,231,1,0,0,0,231,80,1,0,0,0,232,238,5,34,0,0,233,237,8,3,0,0,234,235,
		5,92,0,0,235,237,9,0,0,0,236,233,1,0,0,0,236,234,1,0,0,0,237,240,1,0,0,
		0,238,236,1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,
		242,5,34,0,0,242,82,1,0,0,0,243,245,7,4,0,0,244,243,1,0,0,0,245,246,1,
		0,0,0,246,244,1,0,0,0,246,247,1,0,0,0,247,248,1,0,0,0,248,249,6,41,0,0,
		249,84,1,0,0,0,250,251,5,47,0,0,251,252,5,47,0,0,252,256,1,0,0,0,253,255,
		8,5,0,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,
		0,257,259,1,0,0,0,258,256,1,0,0,0,259,260,6,42,0,0,260,86,1,0,0,0,261,
		262,5,47,0,0,262,263,5,42,0,0,263,267,1,0,0,0,264,266,9,0,0,0,265,264,
		1,0,0,0,266,269,1,0,0,0,267,268,1,0,0,0,267,265,1,0,0,0,268,270,1,0,0,
		0,269,267,1,0,0,0,270,271,5,42,0,0,271,272,5,47,0,0,272,273,1,0,0,0,273,
		274,6,43,0,0,274,88,1,0,0,0,10,0,216,222,228,230,236,238,246,256,267,1,
		6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
